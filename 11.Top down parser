class SimpleTopDownParser:
    def __init__(self, grammar, start_symbol):
        self.grammar = grammar
        self.start_symbol = start_symbol

    def parse(self, tokens):
        return self._parse(tokens, [self.start_symbol])

    def _parse(self, tokens, stack):
        if not stack and not tokens:
            return True
        if not stack or not tokens:
            return False

        current = stack.pop(0)
        if current.isupper():  # Non-terminal
            for rule in self.grammar[current]:
                if self._parse(tokens, list(rule) + stack):
                    return True
        else:  # Terminal
            if tokens[0] == current:
                return self._parse(tokens[1:], stack)

        return False

# Example grammar and test
grammar = {
    'S': [['NP', 'VP']],
    'NP': [['Det', 'N']],
    'VP': [['V', 'NP']],
    'Det': [['the']],
    'N': [['cat'], ['dog']],
    'V': [['chased'], ['saw']]
}

parser = SimpleTopDownParser(grammar, 'S')
tokens = ['the', 'cat', 'chased', 'the', 'dog']
print(parser.parse(tokens))  # Output: True (if sentence is valid)

